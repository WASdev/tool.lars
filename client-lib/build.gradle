/*******************************************************************************
* Copyright (c) 2015 IBM Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

apply plugin: 'java'
apply plugin: 'eclipse'

dependencies {
    compile group:'org.apache.aries', name:'org.apache.aries.util', version:aries_util_version
    compile group:'org.osgi', name:'org.osgi.core', version:osgi_core_version
    compile group:'org.apache.wink', name:'wink-json4j', version:wink_json4j_version
}

task srcJar(type: Jar) {
    classifier = 'src'
    from sourceSets.main.java
}
assemble.dependsOn srcJar
 
sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

if(hasProperty("JAVA_6_HOME")) {
    def java_lib_dir = JAVA_6_HOME + File.separator + "jre" + File.separator + "lib"
    def jars = [];
    try {
    new File(java_lib_dir).eachFileRecurse {
        if (it.path =~/\.jar$/) {
            jars.add(it.path)
        }
    }
    } catch (FileNotFoundException e) {
        // do nothing. The check below will fail the build
    }
    if (jars.size() == 0) {
        throw new GradleException("the JAVA_6_HOME property was specified but no jar files were found in the expected lib directory. JAVA_6_HOME was " 
            + JAVA_6_HOME + " and no jars were found in " + java_lib_dir)
    } else {
        def bootClassPathString = jars.iterator().join(File.pathSeparator)
        println("Setting the bootclasspath to: " + bootClassPathString)
        compileJava {
            options.bootClasspath = bootClassPathString
        }
    }
}


// vim: set si: