/*******************************************************************************
* Copyright (c) 2015 IBM Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'distribution'

import org.apache.tools.ant.filters.*
import org.apache.tools.ant.taskdefs.condition.Os

import static org.apache.tools.ant.taskdefs.condition.Os.*
import static java.lang.ProcessBuilder.Redirect.INHERIT

archivesBaseName = 'larsServer'

if (!hasProperty("libertyRoot")) {
    throw new GradleException("The required property 'libertyRoot' was not set. It should be set to a valid Liberty installation."
        + " Have you copied/edited gradle.properties.template to gradle.properties?")
} else {
    logger.warn("Will use libertyRoot " + libertyRoot)
    File libertyExecutable = new File(libertyRoot + File.separator + "bin" + File.separator + "server")
    if (!libertyExecutable.exists()) {
        throw new GradleException("The property 'libertyRoot' doesn't seem to point to a valid liberty installation. Can't find " + libertyExecutable)
    }
}
if (!hasProperty("mongodExecutable")) {
    throw new GradleException("The required property 'mongodExecutable' was not set. It should be set to a valid mongod")
} else {
    logger.warn("Will use mongodExecutable " + mongodExecutable)
    // This will throw an exception if it's not there
    getMongodExecutable()
}

def requiredSpecJars = [
    'com.ibm.*.javaee.jaxrs.1.1_*.jar',
    'com.ibm.*.javaee.servlet.3.0_*.jar',
    'com.ibm.*.javaee.cdi.1.0_*.jar',
    'com.ibm.*.javaee.annotation.1.1_*.jar']

def requiredIbmJars = [
    'com.ibm.*.passwordUtil_*.jar']

def requiredThirdPartyJars = [
    'com.ibm.websphere.appserver.thirdparty.jaxrs_*.jar']

ext {
    serverName = archivesBaseName
    testServerName = 'testServer'
    baseUrlServerName = 'baseUrlServer'
    bluemixServerName = 'bluemixServer'
}

configurations {
    sharedLibs
    providedCompile.extendsFrom sharedLibs
    antTasks
    fatDeployedCompile.extendsFrom providedCompile
}

sourceSets {
    fatDeployed {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

dependencies {
    compile group:'com.fasterxml.jackson.core', name:'jackson-core', version:jackson_version
    compile group:'com.fasterxml.jackson.core', name:'jackson-databind', version:jackson_version
    compile group:'com.fasterxml.jackson.core', name:'jackson-annotations', version:jackson_version
    
    sharedLibs group:'org.mongodb', name:'mongo-java-driver', version:mongodb_java_version
    providedCompile fileTree(dir: "${libertyRoot}/dev/api/spec", include: requiredSpecJars)
    providedCompile fileTree(dir: "${libertyRoot}/dev/api/ibm", include: requiredIbmJars)
    providedCompile fileTree(dir: "${libertyRoot}/dev/api/third-party", include: requiredThirdPartyJars)
    providedCompile group:'com.google.code.findbugs', name:'annotations', version: '3.0.+'

    testCompile group:'junit', name:'junit', version:junit_version
    testCompile group:'org.hamcrest', name:'hamcrest-library', version:hamcrest_version
    testCompile group:'org.apache.httpcomponents', name:'httpclient', version:httpclient_version
    testCompile group:'org.apache.httpcomponents', name:'httpmime', version:httpmime_version
    testCompile group:'org.jmockit', name:'jmockit', version:jmockit_version
    testCompile project(':test-utils')
    
    // The unit tests need some Liberty classes at runtime, but they should
    // not be compiling against these.
    testRuntime fileTree(dir: "${libertyRoot}/lib", include: '*slf4*.jar')
    
    antTasks group:'net.wasdev.wlp.ant', name:'wlp-anttasks', version:wlp_ant_tasks_version
}

clean {
    dependsOn 'initAnt'
    
    doFirst {
        // Clean will delete the server configuration
        // so make sure we stop it first
        [serverName,testServerName,baseUrlServerName].each{ theServerName ->
            if (isServerRunning(theServerName)) {
                println("Stopping liberty server " + theServerName);
                ant.server(operation: 'stop',
                           installDir: libertyRoot,
                           userDir: 'build/usr',
                           serverName: theServerName)
            }
        }
        
        // Also stop mongod
        if (isMongodRunning()) {
            println("Stopping mongod")
            stopMongod()
        }
    }
}

task bluemixWar(type: War) {
    description 'Assemble the war for the bluemix server, which has a custom web.xml'
    baseName='larsBluemix'
    exclude('WEB-INF/web.xml')
    webXml = file('config/bluemixWeb.xml')   
}
assemble.dependsOn bluemixWar

task fatWar(type: War) {
    dependsOn fatDeployedClasses
    baseName='larsServerFat'
    into ('WEB-INF/classes') {
        from sourceSets.fatDeployed.output
    }
}

test {
    File jmockitJar = configurations.testCompile.find({it.name.startsWith("jmockit")})
    jvmArgs "-javaagent:"+jmockitJar.getAbsolutePath()
}

testFat {
    dependsOn 'startBaseUrlServer'
    finalizedBy 'stopBaseUrlServer'
}

task initAnt << {
    // Load the Liberty ant tasks
    ant.taskdef(resource: "net/wasdev/wlp/ant/antlib.xml",
                classpath: configurations.antTasks.asPath)
}

// Collects all the files that go into the /usr directory in the right structure
CopySpec usrDirSpec(String serverName) {
    return copySpec {
        from(configurations.sharedLibs) {
            into 'shared/resources/libs'
        }
        
        into("servers/${serverName}") {
            from(war) {
                into 'apps'
            }
            from 'config/server.xml'
            from 'config/bootstrap.properties'
            from '../LA_en'
            from '../LICENSE'
        }
    }
}

distributions {
    main {
        baseName = archivesBaseName
        contents {
            into '/'
            with usrDirSpec(serverName)
        }
    }
}

def crossProjectTestFiles = {
    rootProject.allprojects.grep({p -> p.hasProperty("serverHostedTestFiles")}).collect({p -> p.serverHostedTestFiles}).flatten()
}

task createTestUsrDir (type: Copy) {
    description 'Create the /usr directory for a test server'
    // This is the same as the /usr directory for a production server but uses the testConfig.xml
    
    into 'build/usr'
    with usrDirSpec(testServerName)
    with usrDirSpec(baseUrlServerName)
    
    rename 'server\\.xml', 'mainServer.xml'
    
    def traceSpec=""
    if (hasProperty("libertyTraceSpec")) {
        traceSpec = libertyTraceSpec
    }
    
    from('config/testServer.xml') {
        into "servers/${testServerName}"
        rename 'testServer\\.xml', 'server.xml'
        filter(ReplaceTokens, tokens:['HTTP_PORT':testLibertyPortHTTP,
                                      'HTTPS_PORT':testLibertyPortHTTPS,
                                      'LIBERTY_TRACE_SPEC':traceSpec])
    }
    from('config/testServer.props') {
        into "servers/${testServerName}"
        rename 'testServer\\.props', 'bootstrap.properties'
        filter(ReplaceTokens, tokens:['MONGO_PORT':testMongoPort,
                                      'TEST_DB_NAME':testDbName])
    }

    // Add the bluemix war as a separate app, so that the https redirection
    // in the web.xml can be tested    
    from(bluemixWar) {
        into "servers/${testServerName}/apps"
    }
    
    from(fatWar) {
        into "servers/${testServerName}/apps"
    }
    
    from('config/baseUrlServer.xml') {
        into "servers/${baseUrlServerName}"
        rename 'baseUrlServer\\.xml', 'server.xml'
        filter(ReplaceTokens, tokens:['HTTP_PORT':baseUrlLibertyPortHTTP,
                                      'LIBERTY_TRACE_SPEC':traceSpec])
    }
    from('config/testServer.props') {
        into "servers/${baseUrlServerName}"
        rename 'testServer\\.props', 'bootstrap.properties'
        filter(ReplaceTokens, tokens:['MONGO_PORT':testMongoPort,
                                      'TEST_DB_NAME':testDbName])
    }
    
    // Some tests need files served over http
    // Collect these and put them in a war directory in dropins
    from(crossProjectTestFiles) {
        into "servers/${testServerName}/dropins/testFiles.war"
    }
    
}

task startTestServer {
    description 'Start the server with a test config'
    dependsOn initAnt
    dependsOn createTestUsrDir
    
    onlyIf {!isServerRunning(testServerName)}
    
    doLast {
        ant.server(operation: 'start',
                   installDir: libertyRoot,
                   userDir: 'build/usr',
                   serverName: testServerName)
    }
}

task stopTestServer {
    description 'Shutdown the test server'
    dependsOn initAnt
    mustRunAfter startTestServer
    
    onlyIf { !startTestServer.state.skipped && isServerRunning(testServerName) }

    doLast {
        ant.server(operation: 'stop',
                   installDir: libertyRoot,
                   userDir: 'build/usr',
                   serverName: testServerName)
    }
}

task startBaseUrlServer {
    description 'Start the server with the base URL test config'
    dependsOn initAnt
    dependsOn createTestUsrDir
    
    onlyIf {!isServerRunning(baseUrlServerName)}
    
    doLast {
        ant.server(operation: 'start',
                   installDir: libertyRoot,
                   userDir: 'build/usr',
                   serverName: baseUrlServerName)
    }
}

task stopBaseUrlServer {
    description 'Shutdown the base URL test server'
    dependsOn initAnt
    mustRunAfter startBaseUrlServer
    
    onlyIf { !startBaseUrlServer.state.skipped && isServerRunning(baseUrlServerName) }

    doLast {
        ant.server(operation: 'stop',
                   installDir: libertyRoot,
                   userDir: 'build/usr',
                   serverName: baseUrlServerName)
    }
}

boolean isServerRunning(String theServerName) {
    if (file("build/usr/servers/${theServerName}").exists()) {
        ant.server(operation: 'status',
                   installDir: libertyRoot,
                   userDir: 'build/usr',
                   serverName: theServerName,
                   resultProperty: 'serverStatus')
        // Server status returns zero if server is running
        return ant.properties.serverStatus == '0'
    } else {
        // Server directory does not exist, we cannot query
        // the server state and it should not be running
        return false;
    }
}

task startTestMongod {

    onlyIf { !isMongodRunning() }
    
    doLast {
        delete("build/mongo");
        mkdir("build/mongo/data");
        
        startMongod()
    }
}

task stopTestMongod {

    mustRunAfter startTestMongod

    onlyIf { !startTestMongod.state.skipped && isMongodRunning() }
    
    doLast {
        stopMongod()
    }
}

task testZipContents {
    // minimal check on the contents of the server jar. Check for
    // - license file that will be expanded into the server directory
    // - server.xml and bootstrap.properties
    // - the shared resources directory
    
    dependsOn 'distZip'

    doLast{
        checkZipContents(distZip.outputs.files.getAt(0),
            ['servers/larsServer/server.xml', 'servers/larsServer/bootstrap.properties', 'servers/larsServer/LICENSE', 'servers/larsServer/LA_en', 'shared/resources/libs'])
    }

    outputs.files(distZip.getOutputs().getFiles())
}

task packageBluemixLars(type: Zip) {

    description 'Create a liberty packaged server zip of LARS ready for pushing to bluemix'

    from(configurations.sharedLibs) {
        into 'wlp/usr/shared/resources/libs'
    }
    
    into("wlp/usr/servers/${bluemixServerName}") {
        from(bluemixWar) {
            into 'apps'
        }
        from "config/${bluemixServerName}.xml"
        rename("${bluemixServerName}.xml", 'server.xml');
        from "config/${bluemixServerName}.props"
        rename("${bluemixServerName}.props", 'bootstrap.properties');
    }
    baseName bluemixServerName    
}

task dist {    
    // This task is essentially an aggregate of the other packaging/distribution tasks
    List aggregates = ['testZipContents', 'packageBluemixLars']
    aggregates.each { taskname -> 
        dependsOn taskname
        outputs.files(tasks[taskname].getOutputs().getFiles())
    }

}


File getMongodExecutable() {
    File mongod = new File(property('mongodExecutable'))
    if (!mongod.exists()) {
        throw new Exception("Cannot find mongod executable at: " + mongod)
    }
    return mongod
}

void startMongod() {
    ProcessBuilder builder = new ProcessBuilder(
        getMongodExecutable().getPath(),
        '--port', testMongoPort,
        '--pidfilepath', file('build/mongo/mongo.pid').getAbsolutePath(),
        '--logpath', file('build/mongo/mongo.log').getAbsolutePath(),
        '--dbpath', file('build/mongo/data').getAbsolutePath(),
        '--bind_ip', 'localhost'
    )
    builder.inheritIO()
    Process p = builder.start()
    
    println("Waiting for mongo to start accepting connections")
    Long startTime = System.currentTimeMillis();
    while (!isMongodRunning() && System.currentTimeMillis() - startTime < 30000) {
        sleep 1000
    }
    if (!isMongodRunning()) {
        throw new Exception("Mongod still not accepting connections after 30s")
    }
}

void stopMongod() {
    stopProcess(file('build/mongo/mongo.pid').text)
}

void stopProcess(String pid) {
    pid = pid.trim()
    if (Os.isFamily(FAMILY_WINDOWS)) {
        exec {
            commandLine("taskkill", "/F", "/PID", pid)
        }
    } else {
        exec {
            commandLine("kill", pid);
        }
        println("Waiting for mongod to exit")
        Long startTime = System.currentTimeMillis();
        while (isMongodRunning() && System.currentTimeMillis() - startTime < 30000) {
            sleep 1000
        }
        if (isMongodRunning()) {
            println("Mongod still running, sending kill signal")
            exec {
                commandLine("kill", "-9", pid)
            }
        }
    }
}

boolean isMongodRunning() {
    // Checking if the mongo process is running is a bit difficult to do in a cross platform way
    // so we'll just poke the port
    try {
        // Open and then immediately close a socket to the mongo port
        new Socket("localhost", testMongoPort.toInteger()).close()
    } catch (IOException e) {
        // We should get an exception if the port is closed
        return false
    }
    // If we get this far then there is at least something listening on the mongo port
    return true
}

eclipse {
    wtp {
        component {
            contextPath = '/'
        }
    }

    
    classpath {
        file {
            whenMerged { classpath ->
                classpath.entries.findAll{ e -> e.kind == 'src' && e.path.startsWith('src/') && !e.path.startsWith('src/main/') }.each {
                    e -> e.output = 'bin-' + (e.path =~ 'src/(.*)/')[0][1]
                }
            }
        }
    }
    
}



// vim: set si:
